#include <vector>
#include <lemon/list_graph.h>
#include <lemon/glpk.h>
#include <lemon/lp.h>

int main(){
    lemon::Lp lp;
    lemon::ListGraph g;
    std::vector<std::vector<lemon::ListGraph::EdgeMap<lemon::Lp::Col>* > > tseu; 

   for(int i=0; i<4; i++){
      g.addNode();
   }
   //now in a double for loop attach edges
   //let u start at the beginning of the graph;
   for (lemon::ListGraph::NodeIt u(g); u!=lemon::INVALID ;++u){
      //let v start from u
      for (lemon::ListGraph::NodeIt v(u); v!=lemon::INVALID ;++v){
         if(u!=v){ 
            lemon::ListGraph::Edge temp_edge= g.addEdge(u,v);
            
            //assigns cost function
            std::cout << "Added edge with ids u: " << g.id(u) << " v: " <<  g.id(v) << std::endl;
         }
         else{
            std::cout << "Didn't make node, because the Nodes were the same" << std::endl; 
         }
      }
   }
    std::vector< lemon::ListGraph::EdgeMap<lemon::Lp::Col>* > temp1;
    for (int i=0; i<4; i++){
        temp1.clear();
        for(int j=i+1; j<4 ;j++){
            lemon::ListGraph::EdgeMap<lemon::Lp::Col>* temp2=new lemon::L1istGraph::EdgeMap(g);
            temp1.push_back(temp2);
        }
        tseu.push_back(temp1);
    } 

    lp.addRow((*(tseu[0][1]))[g.edgeFromId(0)]==0);

    return 0;
}
